Perfect — here's a **complete MySQL CRUD operations guide** for your **user authentication system** using Servlets + JSP, from **creating the database and table** to writing **SQL queries for Create, Read, Update, Delete**.

I'll include:

1. ✅ MySQL table creation
2. ✅ Sample data insertion
3. ✅ Full CRUD SQL commands (insert, select, update, delete)
4. ✅ Java code structure to use them (JDBC)

---

## 🔧 STEP 1: Create Database and Table in MySQL

### ▶️ Open MySQL command line or phpMyAdmin and run:

```sql
CREATE DATABASE UserDB;

USE UserDB;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    password VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15)
);
```

---

## 💾 STEP 2: Insert Sample User Data

```sql
INSERT INTO users (username, password, email, phone)
VALUES 
('admin', 'admin123', 'admin@gmail.com', '+911234567890'),
('john', 'john456', 'john@gmail.com', '+919876543210');
```

> ⚠️ Use plain passwords only for learning. In production, always use **password hashing (e.g., SHA-256)**.

---

## 🔄 STEP 3: CRUD OPERATIONS (SQL Commands)

### 🔹 ✅ CREATE (Insert New User)

```sql
INSERT INTO users (username, password, email, phone)
VALUES ('sanjay', 'sanjay123', 'sanjay@gmail.com', '+918888888888');
```

---

### 🔹 🔍 READ (Fetch All Users)

```sql
SELECT * FROM users;
```

### 🔹 🔍 READ (Specific User by username)

```sql
SELECT * FROM users WHERE username = 'admin';
```

---

### 🔹 ✏️ UPDATE (Update User Info)

```sql
UPDATE users
SET email = 'newemail@gmail.com', phone = '+911111111111'
WHERE username = 'john';
```

---

### 🔹 ❌ DELETE (Remove a User)

```sql
DELETE FROM users WHERE username = 'sanjay';
```

---

### 🔹 💣 DROP TABLE

```sql
DROP TABLE users;
```

---

## 🖥 STEP 4: JDBC Java Code Structure (for Servlet Integration)

### 🔸 DB Connection Helper Class (DBConnection.java)

```java
import java.sql.*;

public class DBConnection {
    public static Connection getConnection() throws Exception {
        String url = "jdbc:mysql://localhost:3306/UserDB";
        String username = "root"; // your MySQL username
        String password = "";     // your MySQL password

        Class.forName("com.mysql.cj.jdbc.Driver");
        return DriverManager.getConnection(url, username, password);
    }
}
```

> 🔌 Add MySQL JDBC Driver to your project (`mysql-connector-j.jar` in `lib/`)

---

## 🧪 EXAMPLE: Check Login from MySQL in Servlet

### ✅ Updated `LoginServlet.java` (with JDBC + session)

```java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.sql.*;

public class LoginServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        String user = request.getParameter("username");
        String pass = request.getParameter("password");

        try {
            Connection conn = DBConnection.getConnection();
            PreparedStatement ps = conn.prepareStatement(
                "SELECT * FROM users WHERE (email=? OR phone=?) AND password=?"
            );
            ps.setString(1, user);
            ps.setString(2, user);
            ps.setString(3, pass);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                HttpSession session = request.getSession();
                session.setAttribute("user", rs.getString("username"));
                response.sendRedirect("home.jsp");
            } else {
                request.setAttribute("error", "Invalid credentials.");
                RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
                rd.forward(request, response);
            }

            conn.close();
        } catch (Exception e) {
            throw new ServletException("DB error: " + e.getMessage());
        }
    }
}
```

---

## 🗂 Folder Structure for JDBC Integration

```
UserAuthApp/
├── index.jsp
├── home.jsp
├── logout.jsp
├── WEB-INF/
│   ├── web.xml
│   ├── classes/
│   │   ├── LoginServlet.java
│   │   └── DBConnection.java
│   └── lib/
│       └── mysql-connector-j-8.x.x.jar
```

---

## ✅ BONUS: Useful Commands for MySQL in Console

```bash
mysql -u root -p          # Login
SHOW DATABASES;           # List all databases
USE UserDB;               # Select database
SHOW TABLES;              # List all tables
DESC users;               # Describe structure
SELECT * FROM users;      # View users
```

---

Would you like me to send a **ready-to-import `.sql` file** and `DBConnection.java` setup too?
